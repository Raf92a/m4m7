/*
<metadata description="Play drums with your Lightpad Block." details="This App loads a drum grid onto your Lightpad Block with multiple MIDI modes and layouts for use with clip launchers and drum instruments." target="Lightpad" tags="MPE;MIDI;Drum">
<modes>
  <mode name="Default">
    <variable name="fixedStrikeOn" value="false"/>
    <variable name="fixedStrikeValue" value="127"/>
  </mode>
  <mode name="BlocksSkin">
    <variable name="fixedStrikeOn" value="false"/>
    <variable name="fixedStrikeValue" value="127"/>
    <variable name="user0" value="0"/>
  </mode>
</modes>





	<variables>

	  <variable name="fixedStrikeOn" displayName="Fixed strike" type="bool"/>
	  <variable name="fixedStrikeValue" displayName="Fixed strike value" type="int" min="1" max="127" value="127" displayMode="slider"/>

   </variables>

</metadata>
*/

#heapsize: 381

//==============================================================================
/*
   Heap layout:

   === 25 x Pad ===

   0	 4 byte x 25   colours
   100	 1 byte x 25   note numbers

   === 24 x Touch ===

   125	 1 byte x 24   corresponding pad index (0xff if none)
   149	 4 byte x 24   initial x positions (for relative pitchbend)
   245	 4 byte x 24   initial y positions (for relative y axis)
   341	 1 byte x 24   MIDI channel assigned

   === 16 x Channel ===

   365	 1 byte x 16   touch to track for this channel (depends on tracking mode)
*/
//==============================================================================



int entry;
int thisID;
int masterID;
int gridSize;
float slideCoef;
int shouldSendPitchBend;
float pitchBendCurve;
int trackingMode;

int baseNote;
int padWidth, padSpacing;
int dimFactor, dimDelay, dimDelta;
int channelLastAssigned;
int activePads;
int clusterWidth;
int clusterHeight;
int pad1c;
int pad2c;
int pad3c;
int pad4c;
int pad5c;
int pad6c;
int pad7c;
int pad8c;
int pad9c;
int pad10c;
int pad11c;
int pad12c;
int pad13c;
int pad14c;
int pad15c;
int pad16c;

int a;

void debug(int num1, int num2, int num3)
{
	drawNumber(num1, 0xffffffff, 1, 0);
	drawNumber(num2, 0xffffffff, 1, 5);
	drawNumber(num3, 0xffffffff, 1, 10);
}

void initialise()
{
	//setStatusOverlayActive(true);
    setLocalConfigActiveState (64, false, false);
	updateCluster();

	gridSize = 4;
	slideCoef = 0.0;
	shouldSendPitchBend = false;
	pitchBendCurve = 0.5;
	trackingMode = 0;

	padWidth = 15 / gridSize;
	padSpacing = gridSize > 1 ? (15 - gridSize * padWidth) / (gridSize - 1) : 0;
	padWidth += padSpacing;

	dimFactor = 0;
	dimDelta = 0;
	dimDelay = 12;

	initialisePads();
	initialiseTouches();
	initialiseChannels();

	useMPEDuplicateFilter (false);
	setChannelRange (false, 0, 0);
	for (int i = 0; i < 32; ++i)
		setLocalConfigActiveState (i, false, false);

}

//==============================================================================
void initialisePads()
{
	for (int padIndex = 0; padIndex < 25; ++padIndex)
	{
		int addNote = int(padIndex/4)*4;
		Pad_setNote (padIndex, baseNote + padIndex + addNote);
	}
}

void initialiseTouches()
{
	for (int touchIndex = 0; touchIndex < 24; ++touchIndex)
	{
		Touch_setPad (touchIndex, 0xff);
		Touch_setChannel (touchIndex, 0xff);
	}
}

void initialiseChannels()
{
	for (int channel = 0; channel < 16; ++channel)
	{
		Channel_setTrackedTouch (channel, 0xff);

		// Send note-offs for all channels & notes to avoid stuck notes
		// when modifying dynamic variables from the sidepanel.
		sendMIDI (0xb0 | channel, 120, 0); // All sound off msg
		sendMIDI (0xb0 | channel, 123, 0); // All notes off msg
	}
}


//==============================================================================
void checkAndUpdateCluster()
{
	int w = getClusterWidth();
	int h = getClusterHeight();

	if (clusterWidth != w || clusterHeight != h)
	{
		updateCluster();
	}
}

//==============================================================================
void updateCluster()
{
	clusterWidth  = getClusterWidth();
	clusterHeight = getClusterHeight();

	thisID = getBlockIDForIndex (getClusterIndex());
	int numBlocksInCluster = getNumBlocksInCurrentCluster();
	if(isMasterBlock())
	{
		masterID = thisID;
		setLocalConfig(64, thisID);
		for (int i = 0; i < numBlocksInCluster; ++i)
	    {
			int id = getBlockIdForBlockInCluster(i);
			setRemoteConfig (id, 64, thisID);
	    }
	}
	else
	{
		for (int i = 0; i < numBlocksInCluster; ++i)
		{
			int id = getBlockIdForBlockInCluster(i);
			if (id != thisID)
				requestRemoteConfig(id, 64);
				masterID = getLocalConfig(64);
		}
	}
	if (clusterWidth == 1 && clusterHeight == 1)
	{
		baseNote = 68;
		//debug(999, 0, 0);
		entry = 1;
	}
	else
	{
		int x = getClusterXpos() % 4;
		int y = getClusterYpos() % 4;

		if (clusterWidth == 2 && clusterHeight == 1)
		{
			baseNote = 68 + (x*4);
			entry = 2;
		}
		else if (clusterWidth == 1 && clusterHeight == 2)
		{
			baseNote = 36 + (y*32);
			entry = 3;
		}
		else
		{
			//baseNote = 68 + (x * 4) - (y * 32);
			int correct = (clusterHeight == 0 ? 32 : 0);  //this is needed due to getClusterYpos() bug in Blocks firmware?
			int y_offset = (y == 1 ? 68 : 36);
			baseNote = 36 + x*4 + y_offset;	 // + correct;
			entry = 4;
		}
	}
	int numPadsInGrid = (gridSize * gridSize);
	baseNote = min (baseNote, 127 - numPadsInGrid);
	//debug(thisID, baseNote, 0);
}

void handleMessage(int type, int byte1, int byte2)
{
	//debug(222, 222, type);
	if(type == 1)
	{
		handleNoteMessage(0, byte1, byte2);
	}
	if(type == 126)
	{
		if(isMasterBlock())
		{
			sendNoteOn(0, byte1, byte2);
		}
	}
	else if(type == 125)
	{
		if(isMasterBlock())
		{
			sendNoteOff(0, byte1, byte2);
		}
	}
}


/* -----------------------------------------------------------------------------
 * MIDI HANDLERS
 * ---------------------------------------------------------------------------*/ 


void forwardMIDIToOtherBlocks (int data0, int data1, int data2)
{
	int channel = data0 & 0x0F;
	if(channel == 0)
		for (int clusterIndex = 0; clusterIndex < getNumBlocksInCurrentCluster(); ++clusterIndex)
		{
			int outID = getBlockIdForBlockInCluster (clusterIndex);
			if (getBlockIdForBlockInCluster (clusterIndex) != thisID)
				sendMessageToBlock (getBlockIdForBlockInCluster (clusterIndex), 1, data1, data2);
				//debug(thisID, 999, getBlockIdForBlockInCluster (clusterIndex));
		}
}

void handleMIDI (int byte0, int byte1, int byte2)
{
	int status = byte0 & 0xF0;

	//if (status == 0x90 && byte2 == 0)
	//	  status = 0x80;

	if (status == 0xB0)
		handleCCMessage (byte0 & 0x0F, byte1, byte2);

	if (status == 0x90)
		handleNoteMessage (byte0 & 0x0F, byte1, byte2);

		if (isMasterBlock() && (getClusterWidth() != 1 || getClusterHeight() != 1))
			//forwardMIDIToOtherBlocks (byte0, byte1, byte2);
			for (int clusterIndex = 0; clusterIndex < getNumBlocksInCurrentCluster(); ++clusterIndex)
			{
				//int outID = getBlockIdForBlockInCluster (clusterIndex);
				//if (getBlockIdForBlockInCluster (clusterIndex) != getBlockIdForBlockInCluster(getClusterIndex()))
				if (clusterIndex != getClusterIndex())
					fix(777, 0, 777);	
					sendMessageToBlock (getBlockIdForBlockInCluster (clusterIndex), 1, byte1, byte2);
			}
}

void fix(int a, int b, int c)
{

}

void localSendNoteOn (int channel, int note, int velocity)
{
	if(isMasterBlock())
	{
		sendNoteOn(0, note, velocity);
		//debug(126, note, velocity);
	}
	else
	{
		sendMessageToBlock (getBlockIDOnPort(getPortToMaster()), 126, note, velocity);
		//debug(126, note, velocity);
	}
}

void localSendNoteOff (int channel, int note, int velocity)
{
	if(isMasterBlock())
	{
		sendNoteOff(0, note, velocity);
		//debug(125, note, velocity);
	}
	else
	{
		sendMessageToBlock (getBlockIDOnPort(getPortToMaster()), 125, note, velocity);
		//debug(125, note, velocity);
	}
}

void localSendCC (int channel, int note, int pressure)
{
	if(isMasterBlock())
	{
		sendMIDI(0, note, pressure);
	}
	else
	{
		sendMessageToBlock (getBlockIDOnPort(getPortToMaster()), 124, note, pressure);
	}
}

void handleCCMessage (int channel, int cc, int value)
{
	return;
}

void handleNoteMessage (int channel, int note, int velocity)
{
	int padIndex = (note - baseNote);
	int addNote = (padIndex/8)*4;
	int realIndex = int(padIndex - addNote);
	int next = mod(padIndex, 8);
	bool isnt_adjacent_block = next < 4;
	if(channel == 0)
	{
		if(padIndex > -1)
		{
			if(padIndex < 28)
			{
				if(isnt_adjacent_block)
				{
					Pad_setColour(realIndex, velocity);
				}
			}
		}
	}
}


//==============================================================================
int Pad_getColour (int padIndex)
{
	if (padIndex == 0)	return pad1c;
	if (padIndex == 1)	return pad2c;
	if (padIndex == 2)	return pad3c;
	if (padIndex == 3)	return pad4c;
	if (padIndex == 4)	return pad5c;
	if (padIndex == 5)	return pad6c;
	if (padIndex == 6)	return pad7c;
	if (padIndex == 7)	return pad8c;
	if (padIndex == 8)	return pad9c;
	if (padIndex == 9)	return pad10c;
	if (padIndex == 10) return pad11c;
	if (padIndex == 11) return pad12c;
	if (padIndex == 12) return pad13c;
	if (padIndex == 13) return pad14c;
	if (padIndex == 14) return pad15c;
	if (padIndex == 15) return pad16c;

	return 0xffffffff;
}

void Pad_setColour (int padIndex, int color)
{
	if (padIndex == 0)	pad1c = getPalletteColor(color);
	if (padIndex == 1)	pad2c = getPalletteColor(color);
	if (padIndex == 2)	pad3c = getPalletteColor(color);
	if (padIndex == 3)	pad4c = getPalletteColor(color);
	if (padIndex == 4)	pad5c = getPalletteColor(color);
	if (padIndex == 5)	pad6c = getPalletteColor(color);
	if (padIndex == 6)	pad7c = getPalletteColor(color);
	if (padIndex == 7)	pad8c = getPalletteColor(color);
	if (padIndex == 8)	pad9c = getPalletteColor(color);
	if (padIndex == 9)	pad10c = getPalletteColor(color);
	if (padIndex == 10) pad11c = getPalletteColor(color);
	if (padIndex == 11) pad12c = getPalletteColor(color);
	if (padIndex == 12) pad13c = getPalletteColor(color);
	if (padIndex == 13) pad14c = getPalletteColor(color);
	if (padIndex == 14) pad15c = getPalletteColor(color);
	if (padIndex == 15) pad16c = getPalletteColor(color);

	return 0xffffffff;
}

int getPalletteColor (int color)
{
	if (color == 0)	 return makeARGB( 76, 0, 0, 0 );
	if (color == 1)	 return makeARGB( 76, 242, 22, 0 );
	if (color == 2)	 return makeARGB( 76, 255, 64, 50 );
	if (color == 3)	 return makeARGB( 76, 252, 105, 0 );
	if (color == 4)	 return makeARGB( 76, 142, 99, 30 );
	if (color == 5)	 return makeARGB( 76, 250, 220, 59 );
	if (color == 6)	 return makeARGB( 76, 255, 197, 22 );
	if (color == 7)	 return makeARGB( 76, 182, 255, 14 );
	if (color == 8)	 return makeARGB( 76, 121, 255, 24 );
	if (color == 9)	 return makeARGB( 76, 52, 194, 22 );
	if (color == 10)  return makeARGB( 76, 79, 138, 4 );
	if (color == 11)  return makeARGB( 76, 98, 255, 85 );
	if (color == 12)  return makeARGB( 76, 41, 125, 83 );
	if (color == 13)  return makeARGB( 76, 43, 100, 51 );
	if (color == 14)  return makeARGB( 76, 49, 173, 255 );
	if (color == 15)  return makeARGB( 76, 54, 99, 252 );
	if (color == 16)  return makeARGB( 76, 26, 52, 255 );
	if (color == 17)  return makeARGB( 76, 21, 57, 153 );
	if (color == 18)  return makeARGB( 76, 28, 12, 230 );
	if (color == 19)  return makeARGB( 76, 57, 55, 255 );
	if (color == 20)  return makeARGB( 80, 87, 34, 255 );
	if (color == 21)  return makeARGB( 84, 151, 43, 255 );
	if (color == 22)  return makeARGB( 88, 133, 33, 120 );
	if (color == 23)  return makeARGB( 92, 255, 16, 50 );
	if (color == 24)  return makeARGB( 96, 168, 48, 60 );
	if (color == 25)  return makeARGB( 100, 255, 43, 212 );
	if (color == 26)  return makeARGB( 104, 235, 101, 249 );
	if (color == 27)  return makeARGB( 108, 166, 52, 33 );
	if (color == 28)  return makeARGB( 112, 153, 86, 40 );
	if (color == 29)  return makeARGB( 116, 135, 103, 0 );
	if (color == 30)  return makeARGB( 120, 144, 130, 31 );
	if (color == 31)  return makeARGB( 124, 74, 135, 0 );
	if (color == 32)  return makeARGB( 128, 0, 127, 18 );
	if (color == 33)  return makeARGB( 132, 24, 83, 178 );
	if (color == 34)  return makeARGB( 136, 98, 75, 173 );
	if (color == 35)  return makeARGB( 140, 115, 58, 103 );
	if (color == 36)  return makeARGB( 144, 248, 188, 175 );
	if (color == 37)  return makeARGB( 148, 255, 155, 118 );
	if (color == 38)  return makeARGB( 152, 255, 191, 95 );
	if (color == 39)  return makeARGB( 156, 217, 175, 113 );
	if (color == 40)  return makeARGB( 160, 255, 244, 128 );
	if (color == 41)  return makeARGB( 160, 191, 186, 105 );
	if (color == 42)  return makeARGB( 162, 188, 204, 136 );
	if (color == 43)  return makeARGB( 162, 174, 255, 153 );
	if (color == 44)  return makeARGB( 164, 124, 221, 159 );
	if (color == 45)  return makeARGB( 164, 137, 180, 125 );
	if (color == 46)  return makeARGB( 166, 128, 243, 255 );
	if (color == 47)  return makeARGB( 166, 122, 206, 252 );
	if (color == 48)  return makeARGB( 168, 104, 161, 211 );
	if (color == 49)  return makeARGB( 170, 133, 143, 194 );
	if (color == 50)  return makeARGB( 170, 187, 170, 242 );
	if (color == 51)  return makeARGB( 172, 205, 187, 228 );
	if (color == 52)  return makeARGB( 172, 239, 139, 176 );
	if (color == 53)  return makeARGB( 174, 133, 157, 140 );
	if (color == 54)  return makeARGB( 174, 107, 117, 110 );
	if (color == 55)  return makeARGB( 176, 132, 144, 155 );
	if (color == 56)  return makeARGB( 176, 106, 112, 117 );
	if (color == 57)  return makeARGB( 178, 136, 133, 157 );
	if (color == 58)  return makeARGB( 180, 108, 106, 117 );
	if (color == 59)  return makeARGB( 180, 157, 133, 156 );
	if (color == 60)  return makeARGB( 182, 116, 106, 116 );
	if (color == 61)  return makeARGB( 182, 156, 157, 133 );
	if (color == 62)  return makeARGB( 184, 116, 117, 106 );
	if (color == 63)  return makeARGB( 184, 157, 132, 132 );
	if (color == 64)  return makeARGB( 186, 117, 106, 106 );
	if (color == 65)  return makeARGB( 186, 96, 8, 0 );
	if (color == 66)  return makeARGB( 188, 31, 2, 0 );
	if (color == 67)  return makeARGB( 188, 102, 25, 20 );
	if (color == 68)  return makeARGB( 190, 33, 8, 6 );
	if (color == 69)  return makeARGB( 192, 100, 42, 0 );
	if (color == 70)  return makeARGB( 192, 32, 13, 0 );
	if (color == 71)  return makeARGB( 194, 71, 49, 15 );
	if (color == 72)  return makeARGB( 194, 28, 19, 6 );
	if (color == 73)  return makeARGB( 196, 100, 88, 23 );
	if (color == 74)  return makeARGB( 196, 32, 28, 7 );
	if (color == 75)  return makeARGB( 198, 102, 78, 8 );
	if (color == 76)  return makeARGB( 198, 33, 25, 2 );
	if (color == 77)  return makeARGB( 200, 72, 102, 5 );
	if (color == 78)  return makeARGB( 202, 23, 33, 1 );
	if (color == 79)  return makeARGB( 202, 48, 102, 9 );
	if (color == 80)  return makeARGB( 204, 15, 33, 3 );
	if (color == 81)  return makeARGB( 204, 20, 77, 8 );
	if (color == 82)  return makeARGB( 206, 6, 25, 2 );
	if (color == 83)  return makeARGB( 206, 31, 55, 1 );
	if (color == 84)  return makeARGB( 208, 10, 17, 0 );
	if (color == 85)  return makeARGB( 208, 39, 102, 34 );
	if (color == 86)  return makeARGB( 210, 12, 33, 11 );
	if (color == 87)  return makeARGB( 212, 20, 62, 41 );
	if (color == 88)  return makeARGB( 212, 8, 25, 16 );
	if (color == 89)  return makeARGB( 214, 21, 50, 25 );
	if (color == 90)  return makeARGB( 214, 8, 20, 10 );
	if (color == 91)  return makeARGB( 216, 19, 69, 102 );
	if (color == 92)  return makeARGB( 216, 6, 22, 33 );
	if (color == 93)  return makeARGB( 218, 21, 39, 100 );
	if (color == 94)  return makeARGB( 218, 7, 12, 32 );
	if (color == 95)  return makeARGB( 220, 10, 20, 102 );
	if (color == 96)  return makeARGB( 220, 3, 6, 33 );
	if (color == 97)  return makeARGB( 222, 10, 28, 76 );
	if (color == 98)  return makeARGB( 224, 4, 11, 30 );
	if (color == 99)  return makeARGB( 224, 11, 4, 92 );
	if (color == 100)  return makeARGB( 226, 3, 1, 29 );
	if (color == 101)  return makeARGB( 226, 22, 22, 102 );
	if (color == 102)  return makeARGB( 228, 7, 7, 33 );
	if (color == 103)  return makeARGB( 228, 34, 13, 102 );
	if (color == 104)  return makeARGB( 230, 11, 4, 33 );
	if (color == 105)  return makeARGB( 230, 60, 17, 102 );
	if (color == 106)  return makeARGB( 232, 19, 5, 33 );
	if (color == 107)  return makeARGB( 234, 53, 13, 48 );
	if (color == 108)  return makeARGB( 234, 17, 4, 15 );
	if (color == 109)  return makeARGB( 236, 102, 6, 20 );
	if (color == 110)  return makeARGB( 236, 33, 2, 6 );
	if (color == 111)  return makeARGB( 238, 67, 19, 24 );
	if (color == 112)  return makeARGB( 238, 21, 6, 7 );
	if (color == 113)  return makeARGB( 240, 102, 17, 84 );
	if (color == 114)  return makeARGB( 240, 33, 5, 27 );
	if (color == 115)  return makeARGB( 242, 94, 40, 99 );
	if (color == 116)  return makeARGB( 244, 30, 13, 32 );
	if (color == 117)  return makeARGB( 244, 0, 0, 0 );
	if (color == 118)  return makeARGB( 246, 89, 89, 89 );
	if (color == 119)  return makeARGB( 246, 26, 26, 26 );
	if (color == 120)  return makeARGB( 248, 255, 255, 255 );
	if (color == 121)  return makeARGB( 248, 89, 89, 89 );
	if (color == 122)  return makeARGB( 250, 204, 204, 204 );
	if (color == 123)  return makeARGB( 250, 64, 64, 64 );
	if (color == 124)  return makeARGB( 252, 20, 20, 20 );
	if (color == 125)  return makeARGB( 252, 0, 0, 255 );
	if (color == 126)  return makeARGB( 254, 0, 255, 0 );
	if (color == 127)  return makeARGB( 254, 255, 0, 0 );



	return 0xffffffff;
}

void Pad_setNote (int padIndex, int note)
{
	setHeapByte (padIndex + 100, note);
}

int Pad_getNote (int padIndex)
{
	//return baseNote + padIndex;
	int addNote = (padIndex / 4) * 4;
	return (baseNote + padIndex + addNote);
}

void Pad_setActive (int padIndex, bool shouldBeActive)
{
	activePads = shouldBeActive ? (activePads | (1 << padIndex))
								: (activePads & ~(1 << padIndex));
}

bool Pad_isActive (int padIndex)
{
	return activePads & (1 << padIndex);
}

bool isAnyPadActive()
{
	return activePads;
}

//==============================================================================
void Touch_setPad (int touchIndex, int padIndex)
{
	setHeapByte (touchIndex + 125, padIndex);
}

int Touch_getPad (int touchIndex)
{
	return getHeapByte (touchIndex + 125);
}

// Note: littlefoot doesn't have set/getHeapFloat yet, so we store initial x/y
// positions as ints, scaled up by a factor of 1e6.
void Touch_setInitialX (int touchIndex, float initialX)
{
	setHeapInt ((touchIndex * 4) + 149, int (initialX * 1e6));
}

float Touch_getInitialX (int touchIndex)
{
	return float (getHeapInt ((touchIndex * 4) + 149)) / 1e6;
}

void Touch_setInitialY (int touchIndex, float initialY)
{
	setHeapInt ((touchIndex * 4) + 245, int (initialY * 1e6));
}

float Touch_getInitialY (int touchIndex)
{
	return float (getHeapInt ((touchIndex * 4) + 245)) / 1e6;
}

void Touch_setChannel (int touchIndex, int channel)
{
	setHeapByte (touchIndex + 341, channel);
}

int Touch_getChannel (int touchIndex)
{
	return getHeapByte (touchIndex + 341);
}

//==============================================================================
void Channel_setTrackedTouch (int channel, int touchIndex)
{
	setHeapByte (channel + 365, touchIndex);
}

int Channel_getTrackedTouch (int channel)
{
	return getHeapByte (channel + 365);
}

//==============================================================================
int getTouchedPad (float x, float y)
{
	// Pad positions are inverted in y - i.e. 0 is bottom left, not top left.
	int row = gridSize - (int (y * (0.95 / 2.0) * float (gridSize))) - 1;
	int col = int (x * (0.95 / 2.0) * float (gridSize));

	return (gridSize * row) + col;
}

//==============================================================================
int getTrailColour (int padColour)
{
	if (gridSize == 1)
	{
		// Note - With a grid size of 1, we dont see the pad dim at note on (and hence its next to impossible to see the touch)
		// With this, we draw a white heat trail over the top of the pad, giving a clear touch indication
		// There is the potential that the heat trail being white might clash with the chosen colour,
		// But given that its white, i figure we will normally still be able to see it, and it avoids having
		return 0xFFFFFF;
	}

	if (padColour == 0xff000000)
		return 0xffaaaaaa;

	return blendARGB (0x88ffffff, padColour);
}

//==============================================================================
void updateDimFactor()
{
	if (isAnyPadActive() || dimDelta)
	{
		if (dimFactor < 180)
			dimDelta = 60;
		else
			dimDelta = 0;

		dimFactor += dimDelta;
		dimDelay = 8;
	}
	else
	{
		if (--dimDelay <= 0)
		{
			dimFactor -= 24;

			if (dimFactor < 0)
				dimFactor = 0;
		}
	}
}

//==============================================================================
void drawPad (int x, int y, int colour, int bottomRightCornerDarkeningAmount)
{
	//int dark = blendARGB (colour, bottomRightCornerDarkeningAmount << 24);
	//int mid	 = blendARGB (colour, (bottomRightCornerDarkeningAmount / 2) << 24);

	int w = padWidth - padSpacing;
	//blendGradientRect (colour, mid, dark, mid, x * padWidth, y * padWidth, w, w);
	fillRect(colour, x * padWidth, y * padWidth, w, w);
}

void drawPads()
{
	//clearDisplay();
	int padIndex = 0;

	for (int padY = 0; padY < gridSize; ++padY)
	{
		for (int padX = 0; padX < gridSize; ++padX)
		{
			//int overlayColour = Pad_isActive (padIndex) ? 0x33ffffff : (dimFactor << 24);

			drawPad (padX, gridSize - padY - 1, Pad_getColour (padIndex), 0);

			++padIndex;
		}
	}
}

//==============================================================================
void repaint()
{
	clearDisplay();
	//updateDimFactor();

	if (isConnectedToHost())
		drawPads();

	// Overlay heatmap
	//drawPressureMap();
	//fadePressureMap();

	checkAndUpdateCluster();
	//debug(entry, getClusterYpos(), baseNote);
	//if(masterID==0)
	//	updateCluster();
}

//==============================================================================

int getPitchwheelValue (int touchIndex, float x)
{
	if (! shouldSendPitchBend)
		return 8192;

	float blockWidthUnits = 2.0;
	float initialX = Touch_getInitialX (touchIndex);
	float deltaX = (x - initialX) * (blockWidthUnits + 0.1); // Adjust width by 0.1 as edges are hard to reach

	if (abs (deltaX) > 1.0)
	{
		// Initially the note centre is at centre of the finger strike,
		// but after a significant slide is performed, we want to use the
		// actual pad centres to avoid confusion about pad boundaries.
		float divisor = 1.0 / float (gridSize);

		initialX = ((mod (Touch_getPad (touchIndex), gridSize) * divisor) + (divisor * 0.5)) * blockWidthUnits;
		deltaX = (x - initialX) * (blockWidthUnits + 0.1); // recompute with new initialX
	}
	int pitchWheel = getPitchWheelFromDeltaX (deltaX);
	return pitchWheel;
}

//==============================================================================
int getPitchWheelFromDeltaX (float deltaX)
{
	// Wheel range is front 0 - 1, where 0.5 is linear. We dont want it to go fully to zero tho, because that disabled the curve
	float wheelRange = ((pitchBendCurve * 0.85) + 0.15);
	float center	 = 8192.0;
	float range		 = 8192.0 * wheelRange;
	float minRange	 = center - range;
	float maxRange	 = center + range;
	float pitchwheel = map (deltaX, -2.0, 2.0, minRange, maxRange);
	return clamp (0, 16383, int (pitchwheel));
}

//==============================================================================
int getYAxisValue (int touchIndex, float y)
{
	float initialY = Touch_getInitialY (touchIndex);

	if (y >= initialY)
			y = map (y, initialY, 2.0, 0.0, -1.0);
		else
			y = map (y, 0.0, initialY, 1.0, 0.0);

	y = 0.5 + (0.5 * applyCurve (y));

	return clamp (0, 127, int (y * 127));
}

float applyCurve (float y)
{
	float absY = slideCoef < 0 ? 1.0 - abs (y) : abs(y);
	float absCoef = abs (slideCoef);

	if (absCoef < 0.01)
		return y;

	float ky = (16.0 * absCoef / (1.0 + absCoef)) * absY;
	float curved = (absY + ky) / (1 + ky);

	if (slideCoef < 0)
		curved = 1 - curved;

	if (y < 0)
		curved = -curved;

	return curved;
}

//==============================================================================
bool shouldTrackNewTouch (int channel, int touchIndex, int note)
{
	if (trackingMode == 0)
		return true;  // track last note on channel: new note always overrides old one!

	int previouslyTrackedTouch = Channel_getTrackedTouch (channel);

	if (previouslyTrackedTouch == 0xff)
		return true;  // channel is free and can track this touch

	int previouslyTrackedNote = Pad_getNote (Touch_getPad (previouslyTrackedTouch));

	if ((trackingMode == 1 && note > previouslyTrackedNote) || (trackingMode == 2 && note < previouslyTrackedNote))
		return true;  // new note is higher/lower than previous note, and we should track highest/lowest note

	return false;
}

//==============================================================================
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
	int padIndex = getTouchedPad (x, y);
	int note = Pad_getNote (padIndex);
	int colour = Pad_getColour (padIndex);
	int channel = assignChannel (note);
	int velocity = fixedStrikeOn ? fixedStrikeValue : clamp (1, 127, int (vz * 127.0));
	int pressure = clamp (0, 127, int (z * 127.0));

	//if (pressType == 0) // channel pressure
	//	sendMIDI (0xd0 | channel, pressure);

	//else // poly aftertouch
	//	sendMIDI (0xa0 | channel, note, pressure);

	//sendPitchBend (channel, 8192);
	//sendMIDI (0xb0 | channel, slideCc, 64);	 // initial Y in relative mode
	localSendNoteOn (channel, note, velocity);
	//localSendCC (channel, note, pressure);
	//sendMIDI (0xa0 | channel, note, pressure);
	localSendCC (channel, note, pressure);

	//addPressurePoint (getTrailColour (colour), x, y, z * 10.0);

	Pad_setActive (padIndex, true);

	Touch_setPad (touchIndex, padIndex);
	Touch_setInitialX (touchIndex, x);
	Touch_setInitialY (touchIndex, y);
	Touch_setChannel (touchIndex, channel);

	if (shouldTrackNewTouch (channel, touchIndex, note))
		Channel_setTrackedTouch (channel, touchIndex);
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
	int padIndex = Touch_getPad (touchIndex);
	int note = Pad_getNote (padIndex);
	int channel = Touch_getChannel (touchIndex);

	if (padIndex == 0xff)
		return;	 // touch was not started.

	//if (Channel_getTrackedTouch (channel) != touchIndex)
	//	return;	 // these are not the touch messages you're looking for...

	int pressure = clamp (0, 127, int (z * 127.0));
	//localSendCC (channel, note, pressure);
	//sendMIDI (0xa0 | channel, note, pressure);
	localSendCC (channel, note, pressure);

	//if (pressType == 0) // channel pressure
	//	sendMIDI (0xd0 | channel, pressure);

	//else // poly aftertouch
	//	sendMIDI (0xa0 | channel, Pad_getNote (padIndex), pressure);

	//sendMIDI (0xb0 | channel, slideCc, getYAxisValue (touchIndex, y));

	//sendPitchBend (channel, getPitchwheelValue (touchIndex, x));

	//int colour = Pad_getColour (padIndex);
	//addPressurePoint (getTrailColour (colour), x, y, z * 10.0);
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
	int padIndex = Touch_getPad (touchIndex);
	int channel = Touch_getChannel (touchIndex);

	if (padIndex == 0xff)
		return;	 // touch was not started.

	int note = Pad_getNote (padIndex);
	int velocity = clamp (0, 127, int (vz * 127.0));

	localSendNoteOff (channel, note, velocity);
	localSendCC (channel, note, velocity);

	Pad_setActive (padIndex, false);

	Touch_setPad (touchIndex, 0xff);
	Touch_setChannel (touchIndex, 0xff);

	Channel_setTrackedTouch (channel, 0xff);

	deassignChannel (note, channel);
}


/*
<display backgroundColour="0xFF8B58B8" textColour ="0xFFFFFFFF">
	<pixels>
		<pixel index="0" colour="0xA0671C1C" />
		<pixel index="1" colour="0xA0671C1C" />
		<pixel index="2" colour="0xA0671C1C" />
		<pixel index="4" colour="0x802195A8" />
		<pixel index="5" colour="0x802195A8" />
		<pixel index="6" colour="0x802195A8" />
		<pixel index="8" colour="0xA70DAE6F" />
		<pixel index="9" colour="0xA70DAE6F" />
		<pixel index="10" colour="0xA70DAE6F" />
		<pixel index="12" colour="0x64CEE315" />
		<pixel index="13" colour="0x64CEE315" />
		<pixel index="14" colour="0x64CEE315" />
		<pixel index="15" colour="0xA0671C1C" />
		<pixel index="16" colour="0xA0671C1C" />
		<pixel index="17" colour="0xA0671C1C" />
		<pixel index="19" colour="0x802195A8" />
		<pixel index="20" colour="0x802195A8" />
		<pixel index="21" colour="0x802195A8" />
		<pixel index="23" colour="0xA70DAE6F" />
		<pixel index="24" colour="0xA70DAE6F" />
		<pixel index="25" colour="0xA70DAE6F" />
		<pixel index="27" colour="0x64CEE315" />
		<pixel index="28" colour="0x64CEE315" />
		<pixel index="29" colour="0x64CEE315" />
		<pixel index="30" colour="0xA0671C1C" />
		<pixel index="31" colour="0xA0671C1C" />
		<pixel index="32" colour="0xA0671C1C" />
		<pixel index="34" colour="0x802195A8" />
		<pixel index="35" colour="0x802195A8" />
		<pixel index="36" colour="0x802195A8" />
		<pixel index="38" colour="0xA70DAE6F" />
		<pixel index="39" colour="0xA70DAE6F" />
		<pixel index="40" colour="0xA70DAE6F" />
		<pixel index="42" colour="0x64CEE315" />
		<pixel index="43" colour="0x64CEE315" />
		<pixel index="44" colour="0x64CEE315" />
		<pixel index="60" colour="0x936B196C" />
		<pixel index="61" colour="0x936B196C" />
		<pixel index="62" colour="0x936B196C" />
		<pixel index="64" colour="0x93CC44A8" />
		<pixel index="65" colour="0x93CC44A8" />
		<pixel index="66" colour="0x93CC44A8" />
		<pixel index="68" colour="0x626ED734" />
		<pixel index="69" colour="0x626ED734" />
		<pixel index="70" colour="0x626ED734" />
		<pixel index="72" colour="0x912E8CB1" />
		<pixel index="73" colour="0x912E8CB1" />
		<pixel index="74" colour="0x912E8CB1" />
		<pixel index="75" colour="0x936B196C" />
		<pixel index="76" colour="0x936B196C" />
		<pixel index="77" colour="0x936B196C" />
		<pixel index="79" colour="0x93CC44A8" />
		<pixel index="80" colour="0x93CC44A8" />
		<pixel index="81" colour="0x93CC44A8" />
		<pixel index="83" colour="0x626ED734" />
		<pixel index="84" colour="0x626ED734" />
		<pixel index="85" colour="0x626ED734" />
		<pixel index="87" colour="0x912E8CB1" />
		<pixel index="88" colour="0x912E8CB1" />
		<pixel index="89" colour="0x912E8CB1" />
		<pixel index="90" colour="0x936B196C" />
		<pixel index="91" colour="0x936B196C" />
		<pixel index="92" colour="0x936B196C" />
		<pixel index="94" colour="0x93CC44A8" />
		<pixel index="95" colour="0x93CC44A8" />
		<pixel index="96" colour="0x93CC44A8" />
		<pixel index="98" colour="0x626ED734" />
		<pixel index="99" colour="0x626ED734" />
		<pixel index="100" colour="0x626ED734" />
		<pixel index="102" colour="0x912E8CB1" />
		<pixel index="103" colour="0x912E8CB1" />
		<pixel index="104" colour="0x912E8CB1" />
		<pixel index="120" colour="0xA2B248BE" />
		<pixel index="121" colour="0xA2B248BE" />
		<pixel index="122" colour="0xA2B248BE" />
		<pixel index="124" colour="0x9CC54A4A" />
		<pixel index="125" colour="0x9CC54A4A" />
		<pixel index="126" colour="0x9CC54A4A" />
		<pixel index="128" colour="0x9521CACF" />
		<pixel index="129" colour="0x9521CACF" />
		<pixel index="130" colour="0x9521CACF" />
		<pixel index="132" colour="0xAF31B34C" />
		<pixel index="133" colour="0xAF31B34C" />
		<pixel index="134" colour="0xAF31B34C" />
		<pixel index="135" colour="0xA2B248BE" />
		<pixel index="136" colour="0xA2B248BE" />
		<pixel index="137" colour="0xA2B248BE" />
		<pixel index="139" colour="0x9CC54A4A" />
		<pixel index="140" colour="0x9CC54A4A" />
		<pixel index="141" colour="0x9CC54A4A" />
		<pixel index="143" colour="0x9521CACF" />
		<pixel index="144" colour="0x9521CACF" />
		<pixel index="145" colour="0x9521CACF" />
		<pixel index="147" colour="0xAF31B34C" />
		<pixel index="148" colour="0xAF31B34C" />
		<pixel index="149" colour="0xAF31B34C" />
		<pixel index="150" colour="0xA2B248BE" />
		<pixel index="151" colour="0xA2B248BE" />
		<pixel index="152" colour="0xA2B248BE" />
		<pixel index="154" colour="0x9CC54A4A" />
		<pixel index="155" colour="0x9CC54A4A" />
		<pixel index="156" colour="0x9CC54A4A" />
		<pixel index="158" colour="0x9521CACF" />
		<pixel index="159" colour="0x9521CACF" />
		<pixel index="160" colour="0x9521CACF" />
		<pixel index="162" colour="0xAF31B34C" />
		<pixel index="163" colour="0xAF31B34C" />
		<pixel index="164" colour="0xAF31B34C" />
		<pixel index="180" colour="0xBD4280BF" />
		<pixel index="181" colour="0xBD4280BF" />
		<pixel index="182" colour="0xBD4280BF" />
		<pixel index="184" colour="0x852FBD3C" />
		<pixel index="185" colour="0x852FBD3C" />
		<pixel index="186" colour="0x852FBD3C" />
		<pixel index="188" colour="0x9628C3A0" />
		<pixel index="189" colour="0x9628C3A0" />
		<pixel index="190" colour="0x9628C3A0" />
		<pixel index="192" colour="0x9E4A7BCB" />
		<pixel index="193" colour="0x9E4A7BCB" />
		<pixel index="194" colour="0x9E4A7BCB" />
		<pixel index="195" colour="0xBD4280BF" />
		<pixel index="196" colour="0xBD4280BF" />
		<pixel index="197" colour="0xBD4280BF" />
		<pixel index="199" colour="0x852FBD3C" />
		<pixel index="200" colour="0x852FBD3C" />
		<pixel index="201" colour="0x852FBD3C" />
		<pixel index="203" colour="0x9628C3A0" />
		<pixel index="204" colour="0x9628C3A0" />
		<pixel index="205" colour="0x9628C3A0" />
		<pixel index="207" colour="0x9E4A7BCB" />
		<pixel index="208" colour="0x9E4A7BCB" />
		<pixel index="209" colour="0x9E4A7BCB" />
		<pixel index="210" colour="0xBD4280BF" />
		<pixel index="211" colour="0xBD4280BF" />
		<pixel index="212" colour="0xBD4280BF" />
		<pixel index="214" colour="0x852FBD3C" />
		<pixel index="215" colour="0x852FBD3C" />
		<pixel index="216" colour="0x852FBD3C" />
		<pixel index="218" colour="0x9628C3A0" />
		<pixel index="219" colour="0x9628C3A0" />
		<pixel index="220" colour="0x9628C3A0" />
		<pixel index="222" colour="0x9E4A7BCB" />
		<pixel index="223" colour="0x9E4A7BCB" />
		<pixel index="224" colour="0x9E4A7BCB" />
	</pixels>
</display>
*/